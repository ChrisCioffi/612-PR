#| label: libraries
#| echo: true
#| output: false
library(tidyverse)
library(tidycensus)
library(sf)
#| label: census-api
#| echo: true
#| output: false
census_api_key(Sys.getenv("CENSUS_API_KEY"))
#| label: social-security
#| echo: true
#| output: true
social_security <- read.csv("data/social-security.csv")
social_security <- social_security |>
mutate(GEOID = paste0(ANSI))
head(social_security)
#| label: census-data
#| echo: true
#| output: false
data_2018_2022 <- get_acs(
geography = "county",
variables = c(
total_pop = "B03003_001" # Total population
),
state = "PA",
year = 2022,
survey = "acs5",
output = "wide",
geometry = TRUE
)
# Get data for 2013-2017 ACS
data_2013_2017 <- get_acs(
geography = "county",
variables = c(
total_pop = "B03003_001" # Total population
),
state = "PA",
year = 2017,
survey = "acs5",
output = "wide",
geometry = TRUE
)
#| label: merge-census-data
#| echo: true
#| output: true
data_2018_2022_selected <- data_2018_2022 |>
select(GEOID, NAME, pop_2018_2022 = total_popE, geometry)
# Select relevant columns from the 2013-2017 data (no geometry needed)
data_2013_2017_selected <- data_2013_2017 |>
st_set_geometry(NULL) |>
select(GEOID, pop_2013_2017 = total_popE)
# Merge datasets on GEOID
data_combined <- data_2018_2022_selected |>
left_join(data_2013_2017_selected, by = "GEOID")
# Calculate change in population
data_combined <- data_combined |>
mutate(pop_change = (pop_2013_2017 - pop_2018_2022)/pop_2013_2017)
# Take a look at the resulting dataset
data_combined
#| label: figure-pop-change
#| echo: true
#| output: true
pop_fig <- ggplot(data_combined) +
geom_sf(aes(fill = pop_change)) +
scale_fill_gradient2(
low = "red", mid = "white", high = "green",
midpoint = 0, labels = scales::label_percent()
) +
labs(
title = "Population Growth in ACS (2013-2017 to 2018-2022)",
fill = "% Change"
) +
theme_minimal()
pop_fig
# Save the figure using ggsave
# ggsave("fixed-pop-change.png", pop_fig)
#| label: merge-social-security
#| echo: true
#| output: true
social_geo_data <- data_2018_2022_selected |>
left_join(social_security, by = "GEOID")
# Check for mismatched data
data_error <- anti_join(social_security, data_2018_2022_selected, by = "GEOID")
dim(data_error)[1] == 0 # Should return TRUE
# use to see the classes of each column and reclassify columns that have been classified as character but need to be numeric
map(social_geo_data, class)
social_geo_data <- social_geo_data |>
mutate(Over65 = as.numeric(str_replace_all(Over65, ",",""))) |>
mutate(DisabledWorkers = as.numeric(str_replace_all(DisabledWorkers, ",","")))
# Calculate the ratio of over65 to DI recipients
ratio_data <- social_geo_data |>
mutate(over65Share = (Over65 / pop_2018_2022)) |>
mutate(disabledShare = (DisabledWorkers / pop_2018_2022))
# Calculate the state totals
state_totals <- social_geo_data |>
summarize(
total_pop = sum(pop_2018_2022, na.rm = TRUE),
total_over65 = sum(Over65, na.rm = TRUE),
total_disabled = sum(DisabledWorkers, na.rm=TRUE)
)
state_over65 <- state_totals$total_over65 / state_totals$total_pop
state_disabled <- state_totals$total_disabled / state_totals$total_pop
state_disabled_to_over65 <- state_disabled / state_over65
ratio_data <- ratio_data |>
mutate(double_ratio = (disabledShare / over65Share) - state_disabled_to_over65)
#| label: figure-ratio
#| echo: true
#| output: true
relative_plot <- ggplot(ratio_data) +
geom_sf(aes(fill=double_ratio)) +
scale_fill_gradient2(
low = "red", mid = "white", high = "green",
midpoint = 0
) +
labs(
title = "Relative Population Share DI to OASI to State Average",
fill = "Ratio of Disabled to Over 65"
) +
theme_minimal()
relative_plot
# Save the figure using ggsave
# ggsave("fixed-ratio.png", relative_plot)
